/mnt/phd/jihu/VaxDemandDistance/utils/partnerships_summary_helpers.py:479: RuntimeWarning: invalid value encountered in double_scalars
  assigned_dist_actual = np.array([[sum(CA_TRACT['Dist_weighted'].values) / sum(CA_TRACT['Vaccinated_Population'].values)] + [sum(CA_TRACT[CA_TRACT['HPIQuartile'] == (i+1)]['Dist_weighted'].values) / sum(CA_TRACT[CA_TRACT['HPIQuartile'] == (i+1)]['Vaccinated_Population']) for i in range(nsplits)]])
/mnt/phd/jihu/VaxDemandDistance/utils/partnerships_summary_helpers.py:479: RuntimeWarning: invalid value encountered in double_scalars
  assigned_dist_actual = np.array([[sum(CA_TRACT['Dist_weighted'].values) / sum(CA_TRACT['Vaccinated_Population'].values)] + [sum(CA_TRACT[CA_TRACT['HPIQuartile'] == (i+1)]['Dist_weighted'].values) / sum(CA_TRACT[CA_TRACT['HPIQuartile'] == (i+1)]['Vaccinated_Population']) for i in range(nsplits)]])
/mnt/phd/jihu/VaxDemandDistance/utils/partnerships_summary_helpers.py:479: RuntimeWarning: invalid value encountered in double_scalars
  assigned_dist_actual = np.array([[sum(CA_TRACT['Dist_weighted'].values) / sum(CA_TRACT['Vaccinated_Population'].values)] + [sum(CA_TRACT[CA_TRACT['HPIQuartile'] == (i+1)]['Dist_weighted'].values) / sum(CA_TRACT[CA_TRACT['HPIQuartile'] == (i+1)]['Vaccinated_Population']) for i in range(nsplits)]])
Start creating summary table for _10000_5_4q_mnl...

Importing dataset...

Start computing summary table for Chain = Dollar...

Model = MaxVaxDistLogLin, K = 10000, M = 5, with setting tag _10000_5_4q_mnl...

Closest_total and C follows fix rank of 5

Importing optimization and evaluation solution...

Importing optimization and evaluation solution...

Model = MNL_partial, K = 10000, M = 5, with setting tag _10000_5_4q_mnl...

Closest_total and C follows fix rank of 5

Importing optimization and evaluation solution...

Start computing summary table for Chain = HighSchools...

Model = MaxVaxDistLogLin, K = 10000, M = 5, with setting tag _10000_5_4q_mnl...

Closest_total and C follows fix rank of 5

Importing optimization and evaluation solution...

Model = MNL_partial, K = 10000, M = 5, with setting tag _10000_5_4q_mnl...

Closest_total and C follows fix rank of 5

Importing optimization and evaluation solution...

Start computing summary table for Chain = Coffee...

Model = MaxVaxDistLogLin, K = 10000, M = 5, with setting tag _10000_5_4q_mnl...

Closest_total and C follows fix rank of 5

Importing optimization and evaluation solution...

Model = MNL_partial, K = 10000, M = 5, with setting tag _10000_5_4q_mnl...

Closest_total and C follows fix rank of 5

Importing optimization and evaluation solution...

Table exported as Results_10000_5_4q_mnlchain_leftover.csv

Finished table for _10000_5_4q_mnl!

